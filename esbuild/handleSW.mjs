import esbuild from "esbuild";
import { fileURLToPath } from "url";
import path, { dirname } from "path";

import { getEnvs } from "./getEnvs.mjs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const __srcroot = path.resolve(__dirname, "..", "src") + "/";

// I'm not touching this code ever again. I said.

export function handleSW() {
  return {
    name: "web-worker",
    setup(build) {
      build.onResolve({ filter: /^worker\:/ }, (args) => {
        const resolved = args.path.replace(/^worker\:/, "").replace(/^(.*?)@src\//, __srcroot);
        return {
          path: resolved,
          namespace: "web-worker",
        };
      });

      build.onLoad({ filter: /.*/, namespace: "web-worker" }, async (args) => {
        const workerWithFullPath = args.path;
        const workerFileName = path.basename(workerWithFullPath);

        // This one depends on your file structure
        const outFileWithRelativePath = path.join("dist", workerFileName);

        try {
          await Promise.allSettled([
            /empty/.test(workerFileName) ? Promise.resolve() : esbuild.build({
              define: getEnvs(),
              entryPoints: [workerWithFullPath],
              outfile: outFileWithRelativePath,
              assetNames: "[name]",
              bundle: true,

              // fix(#4): Firefox/Safari (below v15) do not support ESM workers
              // This works around that by bundling everything to an iife!
              format: "iife",

              minify: true,
              bundle: true,
              treeShaking: true,
            }),

            /esbuild|empty/.test(workerFileName) ? esbuild.build({
              define: getEnvs(),
              entryPoints: [workerWithFullPath],
              outdir: "dist",

              assetNames: "[name]",
              entryNames: "[name].worker",
              outExtension: { '.js': '.mjs' },

              format: "esm",

              minify: true,
              bundle: true,
              treeShaking: true,

              color: true,
            }) : Promise.resolve()
          ]);

          return {
            contents: `// This file is generated by esbuild to expose the worker script as a class, export default "./${outFileWithRelativePath}"`,
          };
        } catch (e) {
          console.error("Could not build worker script:", e);
        }
      });
    },
  };
};
